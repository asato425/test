name: CI

# ワークフローのトリガーイベントを設定します。
# workflow_dispatchは手動実行を可能にします。
# 他のイベントを追加する場合は、以下のように記述します。
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
on:
  workflow_dispatch:

jobs:
  # ビルドと静的解析を行うジョブ
  build:
    name: Build and Lint
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブに必要な権限を最小限に設定します。
    permissions:
      contents: read
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10

    steps:
      # リポジトリのコードをチェックアウトします。
      # persist-credentialsはセキュリティのためfalseに設定します。
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップし、Poetryをインストールします。
      # cache: 'poetry' を指定することで、poetry.lockに基づいて依存関係のキャッシュが自動的に管理されます。
      # 複数バージョンのPythonでテストする場合は、strategy.matrixを使用します。
      # 例:
      # strategy:
      #   matrix:
      #     python-version: ["3.9", "3.10", "3.11"]
      # steps:
      #   - name: Set up Python ${{ matrix.python-version }}
      #     uses: actions/setup-python@v5
      #     with:
      #       python-version: ${{ matrix.python-version }}
      #       cache: 'poetry'
      - name: Set up Python 3.11 and Poetry
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
          cache: 'poetry'

      # Poetryを使ってプロジェクトの依存関係をインストールします。
      # --no-interaction と --no-ansi はCI環境での非対話的な実行を保証します。
      - name: Install dependencies with Poetry
        run: poetry install --no-interaction --no-ansi

      # Pythonコードのリンティング（静的解析）を実行します。
      # Ruffは非常に高速なリンターです。
      - name: Run Ruff linter
        run: poetry run ruff check .

      # Pythonコードのフォーマットチェックを実行します。
      # Blackはコードフォーマッターで、--checkオプションでフォーマット違反がないか確認します。
      - name: Run Black formatter check
        run: poetry run black --check .

  # テストを実行するジョブ
  tests:
    name: Run Tests
    # このジョブはbuildジョブが成功した後にのみ実行されます。
    needs: build
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブに必要な権限を最小限に設定します。
    permissions:
      contents: read
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10

    steps:
      # リポジトリのコードをチェックアウトします。
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップし、Poetryをインストールします。
      # buildジョブと同様にキャッシュを活用します。
      - name: Set up Python 3.11 and Poetry
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
          cache: 'poetry'

      # Poetryを使ってプロジェクトの依存関係をインストールします。
      - name: Install dependencies with Poetry
        run: poetry install --no-interaction --no-ansi

      # Pytestを使ってユニットテストを実行し、カバレッジレポートを生成します。
      # --cov=./test は 'test' ディレクトリのコードカバレッジを計測します。
      # --cov-report=xml はXML形式でカバレッジレポートを出力します。
      - name: Run unit tests with coverage
        run: poetry run pytest --cov=./test --cov-report=xml

      # 生成されたカバレッジレポートをアーティファクトとしてアップロードします。
      # これにより、GitHub Actionsの実行結果からレポートをダウンロードして確認できます。
      - name: Upload coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-report
          path: coverage.xml
