name: CI

# ワークフローがトリガーされるイベントを設定します。
on:
  # mainブランチへのpushイベントでワークフローを実行します。
  # 他のブランチやプルリクエストで実行したい場合は、以下のコメントアウトされた行を参考にしてください。
  push:
    branches:
      - work_1009_1615
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch: # 手動でワークフローを実行するためのイベント

# ワークフロー全体の権限を設定します。必要最小限の権限を付与することが推奨されます。
permissions:
  contents: read # リポジトリのコードを読み取るために必要です。
  actions: read # アクションの情報を読み取るために必要です。

# ジョブの並列実行を制御します。同じグループ名のジョブは同時に1つだけ実行されます。
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

jobs:
  # ビルドと静的解析を行うジョブです。
  build:
    name: ビルドと静的解析
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # このジョブに必要な権限を最小限に設定します。
    permissions:
      contents: write # リポジトリのコードを読み取り、アーティファクトをアップロードするために必要です。
      actions: read   # actions/cacheでキャッシュを復元するために必要です。

    steps:
      # リポジトリをチェックアウトします。
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない設定です。セキュリティ上の理由から推奨されます。
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Pythonをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # pyproject.tomlで指定されているPythonバージョンに合わせます。
          python-version: "3.13"

      # Poetryのキャッシュを復元または保存します。
      - name: Poetryキャッシュを復元
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # キャッシュするパスを指定します。
          path: ~/.cache/pypoetry
          # キャッシュキーを生成します。Pythonバージョンとpoetry.lockのハッシュを含めることで、依存関係の変更時にキャッシュが更新されます。
          # matrix戦略を使用していないため、python-versionを直接指定します。
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合に、このプレフィックスで始まる既存のキャッシュを復元します。
          restore-keys: |
            python-3.13-poetry-

      # Poetryを使って依存関係をインストールします。
      - name: 依存関係をインストール
        run: poetry install --no-interaction --no-ansi

      # Blackを使ってコードのフォーマットチェックを行います。
      - name: コードのフォーマットチェック (Black)
        run: poetry run black --check .
        # フォーマットエラーが発生してもジョブを続行します。
        continue-on-error: true

      # Flake8を使って静的解析を行います。
      - name: 静的解析 (Flake8)
        run: poetry run flake8 .
        # 静的解析エラーが発生してもジョブを続行します。
        continue-on-error: true

      # Poetryを使ってパッケージをビルドします。
      - name: パッケージをビルド
        run: poetry build

      # ビルドされた成果物（distディレクトリ）をGitHub Actionsのアーティファクトとしてアップロードします。
      - name: ビルド成果物をアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist
          path: dist/

  # テストを実行するジョブです。
  test:
    name: テストの実行
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # buildジョブが成功した後にこのジョブを実行します。
    needs: build
    # このジョブに必要な権限を最小限に設定します。
    permissions:
      contents: read # リポジトリのコードを読み取るために必要です。
      actions: read   # actions/cacheでキャッシュを復元するために必要です。

    steps:
      # リポジトリをチェックアウトします。
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Pythonをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # Poetryのキャッシュを復元または保存します。
      - name: Poetryキャッシュを復元
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          # matrix戦略を使用していないため、python-versionを直接指定します。
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            python-3.13-poetry-

      # Poetryを使って依存関係をインストールします。
      - name: 依存関係をインストール
        run: poetry install --no-interaction --no-ansi

      # unittestを使ってテストを実行します。
      - name: テストを実行
        run: poetry run python -m unittest discover tests
