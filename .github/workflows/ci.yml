name: CI

# ワークフローがトリガーされるイベントを定義します。
on:
  # 'work_1009_1607' ブランチへのプッシュ時にワークフローを実行します。
  push:
    branches:
      - work_1009_1607
  # 他のイベントを追加する場合は、以下のコメントアウトを解除して使用してください。
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch: # 手動でワークフローを実行するためのイベント

# ワークフローに含まれるジョブを定義します。
jobs:
  # ビルドとLintチェックを行うジョブです。
  build:
    name: ビルドとLint
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブの実行に必要な最小限の権限を設定します。
    permissions:
      contents: read
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # ジョブのステップを定義します。
    steps:
      # リポジトリのコードをチェックアウトします。
      - name: コードのチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        # persist-credentials を false に設定し、セキュリティを強化します。
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Pythonのセットアップ
        id: setup-python # このステップにIDを追加し、出力を参照できるようにします。
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # pyproject.toml に記載のPythonバージョンに合わせます。

      # Poetryをインストールします。
      - name: Poetryのインストール
        run: pip install poetry

      # Poetryの依存関係をキャッシュします。
      - name: Poetry依存関係のキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          # キャッシュキーはPythonバージョンとpoetry.lockファイルのハッシュを含めます。
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合の復元キーを設定します。
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # プロジェクトの依存関係をインストールします。
      - name: 依存関係のインストール
        run: poetry install --no-interaction --no-ansi

      # Flake8を使ってLintチェックを実行します。
      - name: Flake8でLintチェック
        run: poetry run flake8 .
        # Lintエラーが発生してもジョブを続行します。
        continue-on-error: true

  # テストを実行するジョブです。
  test:
    name: テスト
    # ジョブを実行するランナーのOSを指定します。
    runs-on: ubuntu-latest
    # このジョブは 'build' ジョブが成功した場合にのみ実行されます。
    needs: build
    # ジョブの実行に必要な最小限の権限を設定します。
    permissions:
      contents: read
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # ジョブのステップを定義します。
    steps:
      # リポジトリのコードをチェックアウトします。
      - name: コードのチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        # persist-credentials を false に設定し、セキュリティを強化します。
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Pythonのセットアップ
        id: setup-python # このステップにIDを追加し、出力を参照できるようにします。
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # pyproject.toml に記載のPythonバージョンに合わせます。

      # Poetryをインストールします。
      - name: Poetryのインストール
        run: pip install poetry

      # Poetryの依存関係をキャッシュします。
      - name: Poetry依存関係のキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          # キャッシュキーはPythonバージョンとpoetry.lockファイルのハッシュを含めます。
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合の復元キーを設定します。
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # プロジェクトの依存関係をインストールします。
      - name: 依存関係のインストール
        run: poetry install --no-interaction --no-ansi

      # unittestを使ってテストを実行します。
      - name: テストの実行
        run: poetry run python -m unittest discover tests
