name: Python CI/CD

# ワークフローがトリガーされるイベントを定義します。
# workflow_dispatch: は手動でワークフローを実行できるようにします。
# 他のイベント（例: push, pull_request）を追加する場合は、以下のコメントアウトされた行を参考にしてください。
on:
  workflow_dispatch:
  # push:
  #   branches: [ main ] # mainブランチへのpushで実行
  # pull_request:
  #   branches: [ main ] # mainブランチへのプルリクエストで実行

# ワークフローの実行に必要な権限を最小限に設定します。
# このワークフローではコードの読み取り権限のみが必要です。
permissions:
  contents: read

# ワークフローに含まれるジョブを定義します。
jobs:
  # ビルドジョブ
  build:
    name: ビルド
    # ジョブが実行される環境を指定します。
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # ジョブの実行に必要な権限を最小限に設定します。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      # persist-credentials: false は、認証情報を保持しないことを意味し、セキュリティのベストプラクティスです。
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # pyproject.tomlで指定されているPythonバージョン3.13を使用します。
      # id: setup-python を追加し、後続のステップでこのステップの出力を参照できるようにします。
      - name: Python 3.13をセットアップ
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      # Poetryをインストールします。
      - name: Poetryをインストール
        run: pip install poetry

      # Poetryの依存関係をキャッシュします。
      # キャッシュキーにはPythonバージョンとpoetry.lockファイルのハッシュを含めることで、
      # 依存関係が変更された場合にのみ再インストールが行われるようにします。
      - name: Poetryの依存関係をキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # Poetryを使用してプロジェクトの依存関係をインストールします。
      # --no-interaction: 対話モードを無効にします。
      # --no-ansi: ANSI出力（色など）を無効にします。
      # poetry config virtualenvs.create false を実行することで、仮想環境を明示的に作成せず、
      # setup-pythonで設定された環境に直接インストールします。
      - name: 依存関係をインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      # プロジェクトをビルドします。
      # wheelやsdistなどの配布パッケージを生成します。
      - name: プロジェクトをビルド
        run: poetry build

      # ビルドされた成果物（wheelファイルなど）をGitHub Actionsのアーティファクトとしてアップロードします。
      # これにより、後続のジョブや手動でのダウンロードが可能になります。
      - name: ビルド成果物をアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist
          path: dist/

  # テストジョブ
  test:
    name: テスト
    # ビルドジョブが成功した場合にのみテストジョブを実行します。
    needs: build
    # ジョブが実行される環境を指定します。
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間を設定します。
    timeout-minutes: 10
    # ジョブの実行に必要な権限を最小限に設定します。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # id: setup-python を追加し、後続のステップでこのステップの出力を参照できるようにします。
      - name: Python 3.13をセットアップ
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      # Poetryをインストールします。
      - name: Poetryをインストール
        run: pip install poetry

      # Poetryの依存関係をキャッシュします。
      # ビルドジョブと同じキャッシュキーを使用します。
      - name: Poetryの依存関係をキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # 依存関係をインストールします。
      - name: 依存関係をインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      # 単体テストを実行します。
      # unittestモジュールを使用して、'tests'ディレクトリ内のテストを検出して実行します。
      - name: 単体テストを実行
        run: python -m unittest discover tests

# その他の推奨事項:
# - 静的解析ツール (例: flake8, ruff, mypy) を追加してコード品質を向上させることができます。
#   例:
#   - name: コードの静的解析 (ruff)
#     run: poetry run ruff check .
# - コードカバレッジ (例: pytest-cov) を測定し、レポートを生成することができます。
#   例:
#   - name: コードカバレッジを測定
#     run: poetry run pytest --cov=test --cov-report=xml
#   - name: カバレッジレポートをアップロード
#     uses: actions/upload-artifact@v4
#     with:
#       name: coverage-report
#       path: coverage.xml
# - デプロイジョブを追加して、ビルドされた成果物をPyPIや他のサービスに公開することができます。
#   この場合、PyPI APIトークンなどのシークレットをGitHub Secretsに安全に保存し、使用してください。
#   permissions: に id-token: write を追加し、OpenID Connect (OIDC) を使用して認証することも検討してください。
