name: Python CI

on:
  push:
    branches:
      - work_1005_1045
  # 他のイベントを追加する場合は、以下を参考にしてください。
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch: # 手動実行を許可する場合

permissions:
  contents: read # リポジトリのコンテンツを読み取るための最小権限

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10 # ジョブのタイムアウトを10分に設定
    permissions:
      contents: write # アーティファクトをアップロードするために必要
    steps:
      - name: Checkout repository # リポジリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      - name: Set up Python # Python環境をセットアップ
        id: setup-python # このステップにIDを設定
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # Python 3.13を使用

      - name: Install Poetry # Poetryをインストール
        run: pip install poetry

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュをキーに
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry- # キャッシュが見つからない場合の復元キー

      - name: Install project dependencies # プロジェクトの依存関係をインストール
        run: poetry install --no-interaction --no-ansi # 仮想環境を作成せず、依存関係をインストール

      - name: Run Linter (Ruff) # Ruffでコードの静的解析を実行
        run: poetry run ruff check . # Poetry経由でRuffを実行
        continue-on-error: true # エラーが発生してもジョブを続行

      - name: Build package # プロジェクトをビルド
        run: poetry build # Poetryを使ってパッケージをビルド

      - name: Upload build artifacts # ビルドされたパッケージをアーティファクトとしてアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist # アーティファクト名
          path: dist/ # ビルド成果物のパス

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10 # ジョブのタイムアウトを10分に設定
    needs: build # buildジョブが成功した後に実行
    permissions:
      contents: read # リポジトリのコンテンツを読み取るための最小権限
    steps:
      - name: Checkout repository # リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      - name: Set up Python # Python環境をセットアップ
        id: setup-python # このステップにIDを設定
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # Python 3.13を使用

      - name: Install Poetry # Poetryをインストール
        run: pip install poetry

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュをキーに
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry- # キャッシュが見つからない場合の復元キー

      - name: Install project dependencies # プロジェクトの依存関係をインストール
        run: poetry install --no-interaction --no-ansi # 仮想環境を作成せず、依存関係をインストール

      - name: Run Pytest # Pytestで単体テストを実行
        run: poetry run pytest tests/ # Poetry経由でPytestを実行し、testsディレクトリのテストを実行
