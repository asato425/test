name: Python CI

on:
  workflow_dispatch:
    # 他のイベントを追加する場合は、以下を参考にしてください。
    # push:
    #   branches: [ main, develop ]
    # pull_request:
    #   branches: [ main, develop ]
    # schedule:
    #   - cron: '0 0 * * *' # 毎日深夜0時に実行

jobs:
  build:
    # ビルドジョブ: Pythonパッケージのビルドを行います。
    name: Build Python Package
    runs-on: ubuntu-latest
    permissions:
      contents: read # リポジトリの読み取り権限のみ
    timeout-minutes: 10 # ジョブの最大実行時間を10分に設定

    steps:
    - name: Checkout repository
      # リポジトリのコードをチェックアウトします。
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        persist-credentials: false # 認証情報を永続化しない

    - name: Set up Python 3.10
      # Python環境をセットアップします。
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.10' # ビルドに使用するPythonバージョン
        cache: 'poetry' # Poetryの依存関係キャッシュを有効化

    - name: Cache Poetry dependencies
      # Poetryの依存関係をキャッシュし、ビルド時間を短縮します。
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.cache/pypoetry/virtualenvs # Poetryの仮想環境キャッシュパス
        key: poetry-${{ runner.os }}-3.10-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュに基づくキー
        restore-keys: |
          poetry-${{ runner.os }}-3.10-
          poetry-${{ runner.os }}-

    - name: Install Poetry
      # Poetryをインストールし、プロジェクト内に仮想環境を作成するよう設定します。
      run: |
        curl -sSL https://install.python-poetry.org | python -
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      # poetry.lockに基づいて依存関係をインストールします。
      run: poetry install --no-root --sync

    - name: Build package
      # Pythonパッケージをビルドします。
      run: poetry build

  tests:
    # テストジョブ: 複数のPythonバージョンでテストと品質チェックを実行します。
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read # リポジトリの読み取り権限のみ
    timeout-minutes: 20 # ジョブの最大実行時間を20分に設定

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11'] # 複数のPythonバージョンでテストを実行

    steps:
    - name: Checkout repository
      # リポジトリのコードをチェックアウトします。
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        persist-credentials: false # 認証情報を永続化しない

    - name: Set up Python ${{ matrix.python-version }}
      # Python環境をセットアップします。
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry' # Poetryの依存関係キャッシュを有効化

    - name: Cache Poetry dependencies
      # Poetryの依存関係をキャッシュし、テスト時間を短縮します。
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.cache/pypoetry/virtualenvs # Poetryの仮想環境キャッシュパス
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュに基づくキー
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-
          poetry-${{ runner.os }}-

    - name: Install Poetry
      # Poetryをインストールし、プロジェクト内に仮想環境を作成するよう設定します。
      run: |
        curl -sSL https://install.python-poetry.org | python -
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      # poetry.lockに基づいて依存関係と開発ツール（pytest, lintersなど）をインストールします。
      # pyproject.tomlにdev-dependenciesが定義されている場合、これによってインストールされます。
      run: poetry install --no-root --sync

    - name: Run linters (Black, Flake8, isort)
      # コードスタイルと品質チェックを実行します。
      run: |
        poetry run black --check .
        poetry run flake8 .
        poetry run isort --check-only .

    - name: Run type checker (mypy)
      # 静的型チェックを実行します。
      run: poetry run mypy .

    - name: Run tests with coverage
      # pytestを使用してテストを実行し、カバレッジレポートを生成します。
      run: poetry run pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      # 生成されたカバレッジレポートをCodecovにアップロードします。
      # プライベートリポジトリの場合や、Codecovの特定の機能を利用する場合は、
      # secrets.CODECOV_TOKEN を設定する必要がある場合があります。
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
      with:
        files: ./coverage.xml
        # token: ${{ secrets.CODECOV_TOKEN }} # 必要に応じて設定
