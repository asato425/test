name: Python CI Workflow

# ワークフローのトリガー設定
# workflow_dispatch を設定することで、GitHubのUIから手動でこのワークフローを実行できます。
# mainブランチへのpushやpull_requestで自動実行させたい場合は、以下のコメントアウトを解除してください。
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
on:
  workflow_dispatch:

# ワークフロー全体の権限設定
# セキュリティのベストプラクティスとして、デフォルトの権限を読み取り専用に制限します。
permissions:
  contents: read

jobs:
  # ビルドと静的解析を行うジョブ
  build:
    # ジョブの表示名
    name: "ビルドと静的解析"
    # ジョブレベルでの権限設定
    permissions:
      contents: read
    # ジョブを実行する仮想環境の種類
    runs-on: "ubuntu-latest"
    # ジョブのタイムアウト時間（分）
    timeout-minutes: 10

    # ジョブのステップ
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: "リポジトリのチェックアウト"
        # actions/checkoutのv4を使用
        uses: "actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955" # v4.3.0
        with:
          # Gitの認証情報を永続化しないことで、セキュリティを向上させます
          persist-credentials: false

      # ステップ2: Python環境のセットアップ
      - name: "Python 3.11 のセットアップ"
        # actions/setup-pythonのv5を使用
        uses: "actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065" # v5.6.0
        with:
          # 使用するPythonのバージョンを指定
          python-version: "3.11"
          # poetry.lockファイルに基づいて依存関係のキャッシュを有効化し、実行時間を短縮します
          cache: "poetry"

      # ステップ3: 依存関係のインストール
      - name: "Poetryを使用した依存関係のインストール"
        # Poetryをインストールし、poetry.lockファイルに基づいて依存関係をインストールします
        run: |
          pip install poetry
          poetry install

      # ステップ4: 静的解析とフォーマットチェック
      - name: "静的解析 (Ruff) とフォーマットチェック (Black)"
        # Ruffでコードの問題を検出し、Blackでコードフォーマットが規約に沿っているかを確認します
        run: |
          poetry run ruff check .
          poetry run black --check .

  # テストを実行するジョブ
  test:
    # ジョブの表示名
    name: "テスト実行"
    # buildジョブが成功した場合にのみ、このジョブを実行します
    needs: build
    # ジョブレベルでの権限設定
    permissions:
      contents: read
    # ジョブを実行する仮想環境の種類
    runs-on: "ubuntu-latest"
    # ジョブのタイムアウト時間（分）
    timeout-minutes: 10

    # ジョブのステップ
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: "リポジトリのチェックアウト"
        uses: "actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955" # v4.3.0
        with:
          persist-credentials: false

      # ステップ2: Python環境のセットアップ
      - name: "Python 3.11 のセットアップ"
        uses: "actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065" # v5.6.0
        with:
          python-version: "3.11"
          cache: "poetry"

      # ステップ3: 依存関係のインストール
      - name: "Poetryを使用した依存関係のインストール"
        run: |
          pip install poetry
          poetry install

      # ステップ4: テストの実行
      - name: "pytestによるテスト実行"
        # pytestを実行して、自動テストを実施します
        run: "poetry run pytest"
