name: CI

on:
  # コードがpushされたときにワークフローを実行
  push:
    # すべてのブランチで実行
    branches:
      - '**'
  # その他のイベント（例: pull_request, workflow_dispatch）を追加する場合は、以下のコメントアウトを解除してください
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch: # 手動でワークフローを実行するためのイベント

jobs:
  # ビルドとリンティングを行うジョブ
  build:
    name: Build and Lint
    # ジョブを実行するランナーのOSを指定
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # ジョブに必要な最小限の権限を設定
    permissions:
      contents: read # リポジトリのコードを読み取る権限

    steps:
      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップするステップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # 使用するPythonのバージョンを指定
          python-version: "3.13" # Pythonバージョンを3.13に更新
          # Poetryのキャッシュは手動で管理するため、cache: poetryは削除

      # Poetryツールをインストールするステップ
      - name: Install Poetry Tool
        run: python -m pip install poetry

      # PoetryコマンドがPATHに含まれるように ~/.local/bin を追加するステップ
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Poetryの設定を行うステップ（仮想環境を作成しないように設定）
      - name: Configure Poetry
        run: poetry config virtualenvs.create false --local

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # コードのリンティング（静的解析）を実行するステップ
      - name: Run linters (flake8, black)
        run: |
          # flake8をインストールして実行
          poetry run pip install flake8
          poetry run flake8 .
          # blackをインストールしてコードフォーマットをチェック
          poetry run pip install black
          poetry run black --check .

  # テストを実行するジョブ
  test:
    name: Run Tests
    # ジョブを実行するランナーのOSを指定
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # ジョブに必要な最小限の権限を設定
    permissions:
      contents: read # リポジトリのコードを読み取る権限

    steps:
      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップするステップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # 使用するPythonのバージョンを指定
          python-version: "3.13" # Pythonバージョンを3.13に更新
          # Poetryのキャッシュは手動で管理するため、cache: poetryは削除

      # Poetryツールをインストールするステップ
      - name: Install Poetry Tool
        run: python -m pip install poetry

      # PoetryコマンドがPATHに含まれるように ~/.local/bin を追加するステップ
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Poetryの設定を行うステップ（仮想環境を作成しないように設定）
      - name: Configure Poetry
        run: poetry config virtualenvs.create false --local

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # pytestを使用してテストを実行し、カバレッジレポートを生成するステップ
      - name: Run tests with pytest
        run: |
          # pytestとpytest-covをインストール
          poetry run pip install pytest pytest-cov
          # テストを実行し、カバレッジレポートをXML形式で出力
          poetry run pytest --cov=./test --cov-report=xml