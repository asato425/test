name: CI

on:
  # このワークフローは手動で実行できます。
  # pushやpull_requestなどのイベントを追加する場合は、以下のコメントアウトを解除してください。
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  # ビルドジョブ
  build:
    name: ビルド
    # 最新のUbuntu環境でジョブを実行
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # リポジトリのコンテンツを読み取る最小限の権限を設定
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップ
      - name: Pythonをセットアップ
        id: setup-python # ステップIDを追加
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # pyproject.tomlのrequires-pythonに基づいてPython 3.13を指定
          python-version: "3.13"

      # Poetryをインストール
      - name: Poetryをインストール
        run: pip install poetry

      # Poetryの依存関係キャッシュを復元
      - name: Poetryキャッシュを復元
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # Poetryのキャッシュパス
          path: ~/.cache/pypoetry
          # キャッシュキーはPythonバージョンとpoetry.lockファイルのハッシュを使用
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからない場合の復元キー
          restore-keys: |
            python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # 依存関係をインストール
      - name: 依存関係をインストール
        # 仮想環境を作成せず、インタラクションなしでインストール
        run: poetry install --no-interaction --no-ansi

      # パッケージをビルド
      - name: パッケージをビルド
        run: poetry build

      # ビルド成果物（distディレクトリ）をアップロード
      - name: ビルド成果物をアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist
          path: dist/

  # テストジョブ
  tests:
    name: テスト
    # 最新のUbuntu環境でジョブを実行
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # リポジトリのコンテンツを読み取る最小限の権限を設定
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップ
      - name: Pythonをセットアップ
        id: setup-python # ステップIDを追加
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # pyproject.tomlのrequires-pythonに基づいてPython 3.13を指定
          python-version: "3.13"

      # Poetryをインストール
      - name: Poetryをインストール
        run: pip install poetry

      # Poetryの依存関係キャッシュを復元
      - name: Poetryキャッシュを復元
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # Poetryのキャッシュパス
          path: ~/.cache/pypoetry
          # キャッシュキーはPythonバージョンとpoetry.lockファイルのハッシュを使用
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからない場合の復元キー
          restore-keys: |
            python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # 依存関係をインストール
      - name: 依存関係をインストール
        # 仮想環境を作成せず、インタラクションなしでインストール
        run: poetry install --no-interaction --no-ansi

      # unittestを使用してテストを実行
      - name: テストを実行
        # testsディレクトリ内のテストを検出して実行
        run: python -m unittest discover tests
