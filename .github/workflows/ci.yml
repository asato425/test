name: Python CI

# このワークフローは、指定されたブランチへのプッシュ時にPythonプロジェクトのビルドとテストを実行します。
# 他のイベント（例: pull_request, workflow_dispatch）を追加する場合は、以下のコメントアウトされた行を参考にしてください。
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch:

on:
  # work_1014_2018 ブランチへのプッシュ時にワークフローを実行
  push:
    branches:
      - work_1014_2018

# ワークフロー全体の実行に必要な権限を最小限に設定
permissions:
  contents: read

jobs:
  # ビルドとLintチェックを行うジョブ
  build:
    name: Build and Lint
    # ジョブを実行するOS環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # このジョブに必要な権限を明示的に設定
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップ
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # pyproject.toml に基づきPython 3.13を使用
          python-version: "3.13"
          # Poetryの依存関係をキャッシュ
          cache: "poetry"

      # Poetryの仮想環境作成を無効化し、依存関係をインストール
      - name: Install dependencies
        run: |
          # CI環境で仮想環境を作成しないように設定
          poetry config virtualenvs.create false
          # 依存関係をインストール（対話なし、ANSIエスケープコードなし）
          poetry install --no-interaction --no-ansi

      # Ruffを使ってLintチェックを実行
      - name: Run Ruff Lint
        run: poetry run ruff check .
        # Lintエラーが発生してもジョブを続行
        continue-on-error: true

      # Ruffを使ってコードフォーマットのチェックを実行
      - name: Run Ruff Format Check
        run: poetry run ruff format . --check
        # フォーマットエラーが発生してもジョブを続行
        continue-on-error: true

  # テストを実行するジョブ
  test:
    name: Run Tests
    # ジョブを実行するOS環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # buildジョブが成功した場合にのみ実行
    needs: build
    # このジョブに必要な権限を明示的に設定
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない設定（セキュリティベストプラクティス）
          persist-credentials: false

      # Python環境をセットアップ
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # pyproject.toml に基づきPython 3.13を使用
          python-version: "3.13"
          # Poetryの依存関係をキャッシュ
          cache: "poetry"

      # Poetryの仮想環境作成を無効化し、依存関係をインストール
      - name: Install dependencies
        run: |
          # CI環境で仮想環境を作成しないように設定
          poetry config virtualenvs.create false
          # 依存関係をインストール（対話なし、ANSIエスケープコードなし）
          poetry install --no-interaction --no-ansi

      # unittestを使ってテストを実行
      - name: Run Unit Tests
        run: poetry run python -m unittest discover tests
