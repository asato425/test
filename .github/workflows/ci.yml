name: CI

on:
  # このワークフローは、指定されたブランチへのpushイベントでトリガーされます。
  # 他のイベントを追加する場合は、以下のコメントアウトされた例を参考にしてください。
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch:
  #   description: '手動でワークフローを実行します'
  push:
    branches:
      - work_1005_1021

jobs:
  # ビルドとLintチェックを行うジョブ
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # リポジトリのコンテンツを読み取るための最小限の権限を設定
    permissions:
      contents: read
    # マトリクス戦略を定義し、Pythonバージョンを指定
    strategy:
      matrix:
        python-version: ["3.x"]

    steps:
      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        # 認証情報を永続化しない設定（セキュリティベストプラクティス）
        with:
          persist-credentials: false

      # Python環境をセットアップするステップ
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # マトリクスで指定されたPythonバージョンを使用
          python-version: ${{ matrix.python-version }}

      # Poetryをインストールするステップ
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係をキャッシュするステップ
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # キャッシュするパス
          path: ~/.cache/pypoetry/virtualenvs
          # キャッシュキー。OS、Pythonバージョン、poetry.lockファイルのハッシュを含む
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合の復元キー
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # Flake8を使ってコードのスタイルと品質をチェックするステップ
      - name: Run Flake8
        run: poetry run flake8 .
        # エラーが発生してもジョブを続行する
        continue-on-error: true

      # Blackを使ってコードのフォーマットをチェックするステップ
      - name: Run Black (check only)
        run: poetry run black --check .
        # エラーが発生してもジョブを続行する
        continue-on-error: true

  # テストを実行するジョブ
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # ジョブのタイムアウトを10分に設定
    timeout-minutes: 10
    # リポジトリのコンテンツを読み取るための最小限の権限を設定
    permissions:
      contents: read
    # マトリクス戦略を定義し、Pythonバージョンを指定
    strategy:
      matrix:
        python-version: ["3.x"]

    steps:
      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        # 認証情報を永続化しない設定（セキュリティベストプラクティス）
        with:
          persist-credentials: false

      # Python環境をセットアップするステップ
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # マトリクスで指定されたPythonバージョンを使用
          python-version: ${{ matrix.python-version }}

      # Poetryをインストールするステップ
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係をキャッシュするステップ
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # キャッシュするパス
          path: ~/.cache/pypoetry/virtualenvs
          # キャッシュキー。OS、Pythonバージョン、poetry.lockファイルのハッシュを含む
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合の復元キー
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # Pytestを使ってテストを実行するステップ
      - name: Run Pytest
        run: poetry run pytest tests/
