name: Python CI

on:
  workflow_dispatch:
    # 他のイベントを追加する場合は、以下のコメントアウトを解除し、必要に応じて設定してください。
    # push:
    #   branches: [ main ]
    # pull_request:
    #   branches: [ main ]

jobs:
  build:
    # ビルドジョブの名前
    name: Build and Install Dependencies
    # ジョブの実行環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定
    timeout-minutes: 10
    # 必要な権限を最小限に設定
    permissions:
      contents: read

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # persist-credentialsをfalseに設定し、認証情報を保持しない
          persist-credentials: false

      # Python環境のセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # pyproject.tomlのrequires-pythonからPythonバージョンを検出
          python-version: "3.13"

      # Poetryのインストール
      - name: Install Poetry
        run: |
          # Poetryのバージョンを固定してインストール
          pip install poetry==1.8.2

      # Poetryの仮想環境作成を無効化（CI環境向け）
      - name: Configure Poetry for CI
        run: poetry config virtualenvs.create false

      # 依存関係のキャッシュ
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          # キャッシュキーはOS、Pythonバージョン、poetry.lockのハッシュを含む
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # Poetryの仮想環境キャッシュパス
          path: ~/.cache/pypoetry/virtualenvs
          # キャッシュミス時のフォールバックキー
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # 依存関係のインストール
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

  tests:
    # テストジョブの名前
    name: Run Tests
    # ビルドジョブが成功した場合にのみ実行
    needs: build
    # ジョブの実行環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定
    timeout-minutes: 10
    # 必要な権限を最小限に設定
    permissions:
      contents: read

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # persist-credentialsをfalseに設定し、認証情報を保持しない
          persist-credentials: false

      # Python環境のセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # pyproject.tomlのrequires-pythonからPythonバージョンを検出
          python-version: "3.13"

      # Poetryのインストール
      - name: Install Poetry
        run: |
          # Poetryのバージョンを固定してインストール
          pip install poetry==1.8.2

      # Poetryの仮想環境作成を無効化（CI環境向け）
      - name: Configure Poetry for CI
        run: poetry config virtualenvs.create false

      # 依存関係のキャッシュ
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          # キャッシュキーはOS、Pythonバージョン、poetry.lockのハッシュを含む
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          # Poetryの仮想環境キャッシュパス
          path: ~/.cache/pypoetry/virtualenvs
          # キャッシュミス時のフォールバックキー
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      # 依存関係のインストール
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # テストの実行
      - name: Run unit tests
        run: python -m unittest discover tests
        # 静的解析ツール（例: flake8, black, mypy, ruff）の実行ステップをここに追加できます。
        # - name: Run Flake8
        #   run: poetry run flake8 .
        # - name: Run Black
        #   run: poetry run black --check .
        # - name: Run MyPy
        #   run: poetry run mypy .