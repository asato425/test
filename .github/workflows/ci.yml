name: CI

on:
  workflow_dispatch:
  push:

# ワークフロー全体のパーミッションを設定します。
# 必要最低限の権限を付与することが推奨されます。
permissions:
  contents: read # リポジトリのコードをチェックアウトするために必要です。

jobs:
  # ビルドと静的解析を行うジョブです。
  build:
    name: Build and Lint
    runs-on: ubuntu-latest # ジョブを実行するOSを指定します。
    timeout-minutes: 10 # ジョブの最大実行時間を設定します。
    # ジョブレベルのパーミッションを設定します。リポジトリのコードを読み取るために必要です。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      # persist-credentialsはセキュリティのためfalseに設定します。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Set up Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # Lintツールをインストールします。
      # プロジェクトのpyproject.tomlに[tool.poetry]セクションがないため、Poetryの依存管理は使用せず、pipで直接インストールします。
      - name: Install Lint tools
        run: pip install flake8 black

      # Flake8を使ってコードのスタイルチェックと静的解析を行います。
      # continue-on-error: trueを設定することで、Lintエラーが発生しても後続のステップが実行されます。
      - name: Run Flake8 Lint
        run: flake8 .
        continue-on-error: true

      # Blackを使ってコードのフォーマットチェックを行います。
      # --checkオプションで変更を加えずにフォーマット違反を検出します。
      # continue-on-error: trueを設定することで、フォーマットエラーが発生しても後続のステップが実行されます。
      - name: Run Black Formatter Check
        run: black --check .
        continue-on-error: true

  # テストを実行するジョブです。
  test:
    name: Run Tests
    runs-on: ubuntu-latest # ジョブを実行するOSを指定します。
    timeout-minutes: 10 # ジョブの最大実行時間を設定します。
    needs: build # buildジョブが成功した後にこのジョブを実行します。
    # ジョブレベルのパーミッションを設定します。リポジトリのコードを読み取るために必要です。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Set up Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # テストに必要な依存関係をインストールします。
      # このプロジェクトは外部依存がないため、特にインストールするものはありませんが、
      # もし将来的に依存関係が増えた場合はここにpip install -r requirements.txtなどを追加します。
      - name: Install Test dependencies
        run: echo "No specific test dependencies to install based on pyproject.toml"
        # プロジェクトのpyproject.tomlに[tool.poetry]セクションがなく、dependenciesも空のため、
        # ここでは追加の依存関係インストールは行いません。
        # もしテストに必要なライブラリがある場合は、ここにpip install <package>を追加してください。

      # unittestを使ってプロジェクトのテストを実行します。
      # プロジェクトのpyproject.tomlに[tool.poetry]セクションがないため、poetry runは使用せず、直接pythonコマンドを実行します。
      - name: Run Unit Tests
        run: python -m unittest discover tests
