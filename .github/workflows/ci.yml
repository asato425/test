name: Python CI with Poetry
on:
  push:
    branches:
      - work_1005_1135 # プッシュイベントでワークフローをトリガーするブランチ
      # 他のブランチやイベントを追加する場合は、以下のように記述します。
      # - main
      # pull_request:
      #   branches:
      #     - main
      # workflow_dispatch: # 手動でワークフローを実行するためのイベント

permissions:
  contents: read # リポジトリのコンテンツを読み取るための最小限の権限を設定

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest # ジョブを実行するOS
    timeout-minutes: 10 # ジョブの最大実行時間を設定
    permissions:
      contents: read # リポジトリのコンテンツを読み取るための最小限の権限を設定

    steps:
      - name: Checkout repository # リポジトリをチェックアウトするステップ
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない設定（セキュリティ推奨）

      - name: Set up Python # Python環境をセットアップするステップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13' # 使用するPythonのバージョンを指定 (pyproject.tomlのrequires-pythonに合わせる)

      - name: Install Poetry # Poetryをインストールするステップ
        run: pip install poetry # pipを使ってPoetryをインストール

      - name: Configure Poetry for CI # CI環境向けにPoetryを設定するステップ
        # 仮想環境を作成しないように設定し、システムサイトサイトパッケージに依存関係をインストール
        run: poetry config virtualenvs.create false

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュするステップ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # pipのキャッシュディレクトリを対象とする
          path: ~/.cache/pip
          # キャッシュキーはPythonバージョン、OS、poetry.lockファイルのハッシュを含む
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合に復元を試みるキーのプレフィックス
          restore-keys: |
            python-3.13-poetry-

      - name: Install dependencies # プロジェクトの依存関係をインストールするステップ
        # poetry.lockに基づいて依存関係をインストール (--no-interaction, --no-ansiでCI向けに非対話モード)
        run: poetry install --no-interaction --no-ansi

      - name: Run Lint (Flake8) # Flake8によるLintチェックを実行するステップ
        # Poetryの仮想環境内でflake8を実行
        run: poetry run flake8 .
        continue-on-error: true # Lintエラーが発生してもジョブを続行

      - name: Run Lint (Black) # Blackによるコードフォーマットチェックを実行するステップ
        # Poetryの仮想環境内でblack --checkを実行し、フォーマット違反がないか確認
        run: poetry run black --check .
        continue-on-error: true # フォーマットエラーが発生してもジョブを続行

  test:
    name: Run Tests
    runs-on: ubuntu-latest # ジョブを実行するOS
    timeout-minutes: 10 # ジョブの最大実行時間を設定
    needs: build # 'build'ジョブが成功した後にこのジョブを実行
    permissions:
      contents: read # リポジトリのコンテンツを読み取るための最小限の権限を設定

    steps:
      - name: Checkout repository # リポジトリをチェックアウトするステップ
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない設定（セキュリティ推奨）

      - name: Set up Python # Python環境をセットアップするステップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13' # 使用するPythonのバージョンを指定

      - name: Install Poetry # Poetryをインストールするステップ
        run: pip install poetry # pipを使ってPoetryをインストール

      - name: Configure Poetry for CI # CI環境向けにPoetryを設定するステップ
        # 仮想環境を作成しないように設定し、システムサイトパッケージに依存関係をインストール
        run: poetry config virtualenvs.create false

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュするステップ
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # pipのキャッシュディレクトリを対象とする
          path: ~/.cache/pip
          # キャッシュキーはPythonバージョン、OS、poetry.lockファイルのハッシュを含む
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          # キャッシュが見つからなかった場合に復元を試みるキーのプレフィックス
          restore-keys: |
            python-3.13-poetry-

      - name: Install dependencies # プロジェクトの依存関係をインストールするステップ
        # poetry.lockに基づいて依存関係をインストール
        run: poetry install --no-interaction --no-ansi

      - name: Run Unit Tests # 単体テストを実行するステップ
        # Poetryの仮想環境内でunittestを実行
        run: poetry run python -m unittest discover tests
