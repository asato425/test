name: Python CI

# ワークフローのトリガーイベントを定義します。
# workflow_dispatchは手動実行を可能にします。
# 他のイベント（例: push, pull_request）を追加する場合は、以下のように記述します。
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch:
on:
  workflow_dispatch:

# ジョブの並行実行を制御します。
# 同じブランチでの重複実行を防ぎ、最新のコミットのみを処理します。
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ワークフロー内のジョブを定義します。
jobs:
  # ビルドジョブ
  build:
    # ジョブの表示名
    name: Build and Lint
    # ジョブが実行されるランナー環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定 (分)
    timeout-minutes: 10
    # ジョブの権限設定 (最小権限の原則に従う)
    permissions:
      contents: read # リポジトリのコードを読み取るために必要

    # ジョブのステップを定義します。
    steps:
      # リポジリのコードをチェックアウトします。
      # persist-credentials: false はセキュリティのベストプラクティスです。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # プロジェクトのpyproject.tomlからPythonバージョンを自動検出するか、明示的に指定します。
      # ここではPython 3.13を指定し、poetryの依存関係をキャッシュします。
      - name: Set up Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          cache: "poetry" # poetryの依存関係をキャッシュします

      # Poetryをインストールします。
      # snok/install-poetry@v1 アクションを使用して、Poetryを確実にインストールし、PATHに追加します。
      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: '1.x.x' # 使用したいPoetryのバージョンを指定 (例: '1.8.2' や 'latest')

      # poetryの依存関係をインストールします。
      # --no-interaction --no-ansi はCI環境での非対話的なインストールに適しています。
      - name: Install dependencies with Poetry
        run: |
          poetry install --no-interaction --no-ansi

      # コードの静的解析 (Lint) を実行します。
      # flake8を使用してコードスタイルと品質をチェックします。
      - name: Run Flake8 Lint
        run: |
          poetry run flake8 .

      # コードのフォーマットチェック (Black) を実行します。
      # フォーマット違反がないか確認し、違反があれば失敗させます。
      - name: Check code format with Black
        run: |
          poetry run black --check .

  # テストジョブ
  tests:
    # ジョブの表示名
    name: Run Tests
    # ジョブが実行されるランナー環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定 (分)
    timeout-minutes: 10
    # ジョブの権限設定 (最小権限の原則に従う)
    permissions:
      contents: read # リポジトリのコードを読み取るために必要

    # buildジョブが成功した場合にのみ実行します。
    needs: build

    # ジョブのステップを定義します。
    steps:
      # リポジトリのコードをチェックアウトします。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      - name: Set up Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          cache: "poetry"

      # Poetryをインストールします。
      # snok/install-poetry@v1 アクションを使用して、Poetryを確実にインストールし、PATHに追加します。
      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: '1.x.x' # 使用したいPoetryのバージョンを指定 (例: '1.8.2' や 'latest')

      # poetryの依存関係をインストールします。
      - name: Install dependencies with Poetry
        run: |
          poetry install --no-interaction --no-ansi

      # pytestを使用してユニットテストを実行します。
      # pytest-covプラグインを使用してカバレッジレポートを生成します。
      - name: Run unit tests with Pytest
        run: |
          poetry run pytest --cov=./ --cov-report=xml
