name: CI

on:
  # このワークフローは、指定されたブランチへのpushイベントでトリガーされます。
  # 他のイベント（例: pull_request, workflow_dispatch）を追加する場合は、以下のコメントアウトされた行を参考にしてください。
  # pull_request:
  #   branches:
  #     - main
  # workflow_dispatch:
  push:
    branches:
      - work_1009_1619

# ワークフロー全体のパーミッションを設定します。
# 必要最低限の権限を付与することが推奨されます。
permissions:
  contents: read # リポジトリのコードをチェックアウトするために必要です。

jobs:
  # ビルドと静的解析を行うジョブです。
  build:
    name: Build and Lint
    runs-on: ubuntu-latest # ジョブを実行するOSを指定します。
    timeout-minutes: 10 # ジョブの最大実行時間を設定します。
    # ジョブレベルのパーミッションを設定します。リポジトリのコードを読み取るために必要です。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      # persist-credentialsはセキュリティのためfalseに設定します。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # pyproject.tomlのrequires-python設定に合わせてバージョンを指定し、idを付与して後続ステップで参照できるようにします。
      - name: Set up Python 3.13
        id: setup-python-env # このIDを使ってPythonのバージョンを参照します。
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # Poetryをインストールします。
      - name: Install Poetry
        run: pip install poetry==1.8.2 # 特定のバージョンを指定することを推奨します。

      # Poetryの依存関係をキャッシュします。
      # poetry.lockファイルのハッシュとsetup-python-envステップの出力であるPythonバージョンをキーに含めることで、
      # 依存関係やPythonバージョンの変更時にキャッシュを更新します。
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ steps.setup-python-env.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python-env.outputs.python-version }}-poetry-

      # プロジェクトの依存関係をインストールします。
      # --no-interactionと--no-ansiはCI環境での実行に適しています。
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # Flake8を使ってコードのスタイルチェックと静的解析を行います。
      # continue-on-error: trueを設定することで、Lintエラーが発生しても後続のステップが実行されます。
      - name: Run Flake8 Lint
        run: poetry run flake8 .
        continue-on-error: true

      # Blackを使ってコードのフォーマットチェックを行います。
      # --checkオプションで変更を加えずにフォーマット違反を検出します。
      # continue-on-error: trueを設定することで、フォーマットエラーが発生しても後続のステップが実行されます。
      - name: Run Black Formatter Check
        run: poetry run black --check .
        continue-on-error: true

  # テストを実行するジョブです。
  test:
    name: Run Tests
    runs-on: ubuntu-latest # ジョブを実行するOSを指定します。
    timeout-minutes: 10 # ジョブの最大実行時間を設定します。
    needs: build # buildジョブが成功した後にこのジョブを実行します。
    # ジョブレベルのパーミッションを設定します。リポジトリのコードを読み取るために必要です。
    permissions:
      contents: read

    steps:
      # リポジトリをチェックアウトします。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # idを付与して後続ステップで参照できるようにします。
      - name: Set up Python 3.13
        id: setup-python-env # このIDを使ってPythonのバージョンを参照します。
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # Poetryをインストールします。
      - name: Install Poetry
        run: pip install poetry==1.8.2

      # Poetryの依存関係をキャッシュします。
      # poetry.lockファイルのハッシュとsetup-python-envステップの出力であるPythonバージョンをキーに含めることで、
      # 依存関係やPythonバージョンの変更時にキャッシュを更新します。
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ steps.setup-python-env.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python-env.outputs.python-version }}-poetry-

      # プロジェクトの依存関係をインストールします。
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # unittestを使ってプロジェクトのテストを実行します。
      - name: Run Unit Tests
        run: poetry run python -m unittest discover tests
