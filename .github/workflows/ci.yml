name: Python CI

on:
  workflow_dispatch:
    # 他のイベントを追加する場合は、以下のように記述します。
    # push:
    #   branches:
    #     - main
    # pull_request:
    #   branches:
    #     - main

jobs:
  build:
    # ビルドジョブの名前
    name: Build
    # ジョブの実行環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定 (分)
    timeout-minutes: 10
    # ジョブの権限設定 (最小権限)
    permissions:
      contents: read

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない (セキュリティのため)
          persist-credentials: false

      # Python環境のセットアップ
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # プロジェクトで指定されているPythonバージョン
          python-version: "3.13"
          # Poetryの依存関係キャッシュを有効化
          cache: "poetry"

      # Poetryのインストール
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係をインストール
      - name: Install Poetry dependencies
        # Poetryの仮想環境作成を無効化し、システムPythonにインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

  tests:
    # テストジョブの名前
    name: Run Tests
    # ビルドジョブが成功した後に実行
    needs: build
    # ジョブの実行環境
    runs-on: ubuntu-latest
    # ジョブのタイムアウト設定 (分)
    timeout-minutes: 10
    # ジョブの権限設定 (最小権限)
    permissions:
      contents: read

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # 認証情報を永続化しない (セキュリティのため)
          persist-credentials: false

      # Python環境のセットアップ
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          # プロジェクトで指定されているPythonバージョン
          python-version: "3.13"
          # Poetryの依存関係キャッシュを有効化
          cache: "poetry"

      # Poetryのインストール
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係をインストール
      - name: Install Poetry dependencies
        # Poetryの仮想環境作成を無効化し、システムPythonにインストール
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      # テストの実行
      - name: Run unit tests
        # poetry run を使って、Poetryが管理する環境でコマンドを実行
        run: poetry run python -m unittest discover tests
        # 静的解析ツール (flake8, black, mypyなど) を追加する場合は、ここにステップを追加します。
        # 例:
        # - name: Run Flake8
        #   run: poetry run flake8 .
        # - name: Run Black
        #   run: poetry run black --check .
        # - name: Run MyPy
        #   run: poetry run mypy .
