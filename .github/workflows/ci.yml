name: Python CI Workflow

# ワークフローのトリガーを設定します
# 現在は work_1015_1533 ブランチへの push のみで実行されます
# pull_requestやworkflow_dispatchなどの他のイベントを追加するには、以下のようにコメントアウトを解除または追記してください
# on:
#   push:
#     branches:
#       - "work_1015_1533"
#   pull_request:
#     branches:
#       - "main"
#   workflow_dispatch:
on:
  push:
    branches:
      - "work_1015_1533"

jobs:
  # ビルドジョブ: プロジェクトが正常にビルドできることを確認します
  build:
    name: ビルド
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # ステップ1: リポジトリのソースコードをチェックアウトします
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # Gitの認証情報を永続化しないように設定します
          persist-credentials: false

      # ステップ2: Pythonのバージョンを設定します
      - name: Python 3.13 をセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"

      # ステップ3: Poetryをインストールします
      # 以前の実行で発生したshellcheckのLintエラー(SC2086)と、過去の複数回の実行で発生した
      # `poetry` コマンドが見つからないエラーを根本的に解決するため、
      # 手動でのインストールスクリプトから、Poetryインストール専用の `snok/install-poetry` アクションに戻します。
      # このアクションはPoetryのインストールとPATHの設定を確実に行うため、最も安定的です。
      - name: Poetryのインストール
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: "1.8.2"

      # ステップ4: パッケージをビルドします
      # poetry buildコマンドでwheelとsdistを生成します
      - name: パッケージをビルド
        run: poetry build

  # テストジョブ: 静的解析とユニットテストを実行します
  test:
    name: 静的解析とテスト
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # ステップ1: リポジトリのソースコードをチェックアウトします
      - name: リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # ステップ2: Pythonのバージョンと依存関係キャッシュを設定します
      - name: Python 3.13 をセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          # poetry.lockファイルに基づいて依存関係をキャッシュします
          cache: "poetry"

      # ステップ3: Poetryをインストールします
      # 以前の実行で発生したshellcheckのLintエラー(SC2086)と、過去の複数回の実行で発生した
      # `poetry` コマンドが見つからないエラーを根本的に解決するため、
      # 手動でのインストールスクリプトから、Poetryインストール専用の `snok/install-poetry` アクションに戻します。
      # このアクションはPoetryのインストールとPATHの設定を確実に行うため、最も安定的です。
      - name: Poetryのインストール
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: "1.8.2"

      # ステップ4: 依存関係をインストールします
      # キャッシュがヒットした場合、このステップは高速に完了します
      - name: 依存関係をインストール
        run: poetry install --no-interaction

      # ステップ5: 静的解析(Lint)を実行します
      # ここでは高速なリンターであるruffを使用する例を記述します
      - name: 静的解析 (Ruff)
        # Lintエラーでワークフローを停止させないようにします
        continue-on-error: true
        run: |
          pip install ruff
          ruff check .

      # ステップ6: ユニットテストを実行します
      # poetry run経由でテストコマンドを実行します
      - name: ユニットテストを実行
        run: poetry run python -m unittest discover
