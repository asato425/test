name: Python CI/CD Workflow # ワークフローの名前

on:
  workflow_dispatch: # 手動でワークフローを実行するためのトリガー
  # その他のイベント（例: push, pull_request）を追加する場合は、以下のコメントアウトを解除してください。
  # push:
  #   branches: [ main, develop ] # mainブランチとdevelopブランチへのpush時に実行
  # pull_request:
  #   branches: [ main, develop ] # mainブランチとdevelopブランチへのプルリクエスト時に実行

# 同一ブランチでの重複実行を避けるための設定
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Python Package # ビルドジョブの名前
    runs-on: ubuntu-latest # ジョブを実行するOS
    timeout-minutes: 10 # ジョブの最大実行時間
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # テストするPythonのバージョン

    steps:
      - name: Checkout Repository # リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない（セキュリティのため）

      - name: Set up Python ${{ matrix.python-version }} # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry" # Poetryの依存関係をキャッシュする設定（actions/setup-pythonが内部で処理）

      - name: Install Poetry # Poetryをインストール
        run: |
          pip install poetry

      - name: Configure Poetry Virtualenvs # Poetryが仮想環境を作成しないように設定（CI環境向け）
        run: |
          poetry config virtualenvs.create false

      - name: Install dependencies with Poetry # poetry.lockに基づいて依存関係をインストール
        run: |
          poetry install --no-interaction --no-ansi # ユーザーインタラクションなし、ANSIエスケープコードなしでインストール

      - name: Build Python package # Pythonパッケージをビルド
        run: |
          poetry build # sdistとwheelを生成

      - name: Upload built artifacts # ビルドされたパッケージをアーティファクトとしてアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-${{ matrix.python-version }} # アーティファクトの名前
          path: dist/ # ビルド成果物のパス

  tests:
    name: Run Tests and Lint # テストとリンティングジョブの名前
    runs-on: ubuntu-latest # ジョブを実行するOS
    timeout-minutes: 15 # ジョブの最大実行時間
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # テストするPythonのバージョン

    steps:
      - name: Checkout Repository # リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない（セキュリティのため）

      - name: Set up Python ${{ matrix.python-version }} # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry" # Poetryの依存関係をキャッシュする設定（actions/setup-pythonが内部で処理）

      - name: Install Poetry # Poetryをインストール
        run: |
          pip install poetry

      - name: Configure Poetry Virtualenvs # Poetryが仮想環境を作成しないように設定（CI環境向け）
        run: |
          poetry config virtualenvs.create false

      - name: Install dependencies with Poetry # poetry.lockに基づいて依存関係をインストール
        run: |
          poetry install --no-interaction --no-ansi # ユーザーインタラクションなし、ANSIエスケープコードなしでインストール
          # ruff, pytest, pytest-covなどの開発依存もpyproject.tomlに定義されていればここでインストールされる

      - name: Run Ruff Linter # Ruffを使ってコードの静的解析を実行
        run: |
          poetry run ruff check . # プロジェクト全体をチェック

      - name: Run Ruff Formatter Check # Ruffを使ってコードのフォーマットチェックを実行
        run: |
          poetry run ruff format --check . # フォーマット違反がないかチェック

      - name: Run Pytest # Pytestを使ってユニットテストを実行
        run: |
          poetry run pytest -q --cov=test --cov-report=xml # テストを実行し、カバレッジレポートをXML形式で生成
        env:
          PYTHONPATH: . # プロジェクトルートをPYTHONPATHに追加してモジュールをインポート可能にする

      - name: Upload coverage report # カバレッジレポートをアーティファクトとしてアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-report-${{ matrix.python-version }} # アーティファクトの名前
          path: coverage.xml # カバレッジレポートのパス
