name: Python CI with Poetry

on:
  workflow_dispatch:
    # 他のイベントを追加する場合は、以下のコメントアウトを解除してください。
    # push:
    #   branches: [ main ]
    # pull_request:
    #   branches: [ main ]

jobs:
  build:
    # ビルドジョブの名前
    name: Build Project
    # ジョブを実行するOS
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間
    timeout-minutes: 10
    # ジョブに必要な権限を最小限に設定
    permissions:
      contents: read
    # マトリクス戦略で複数のPythonバージョンをテスト可能にする
    strategy:
      matrix:
        python-version: ["3.13"] # プロジェクトのpyproject.tomlで指定されたバージョン
        # 複数のPythonバージョンをテストする場合は、以下のように追加してください。
        # python-version: ["3.13", "3.12", "3.11"]

    steps:
      # リポジリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      # Python環境をセットアップするステップ
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      # Poetryをインストールするステップ
      - name: Install Poetry
        run: |
          pip install poetry
          # CI環境では仮想環境を作成しないように設定
          poetry config virtualenvs.create false

      # Poetryの依存関係をキャッシュするステップ
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # (オプション) プロジェクトをビルドするステップ
      # poetry build コマンドでパッケージをビルドする場合に利用
      # - name: Build project
      #   run: poetry build

  tests:
    # テストジョブの名前
    name: Run Tests
    # buildジョブが成功した後に実行
    needs: build
    # ジョブを実行するOS
    runs-on: ubuntu-latest
    # ジョブのタイムアウト時間
    timeout-minutes: 10
    # ジョブに必要な権限を最小限に設定
    permissions:
      contents: read
    # マトリクス戦略で複数のPythonバージョンをテスト可能にする
    strategy:
      matrix:
        python-version: ["3.13"] # プロジェクトのpyproject.tomlで指定されたバージョン

    steps:
      # リポジトリをチェックアウトするステップ
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      # Python環境をセットアップするステップ
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      # Poetryをインストールするステップ
      - name: Install Poetry
        run: |
          pip install poetry
          # CI環境では仮想環境を作成しないように設定
          poetry config virtualenvs.create false

      # Poetryの依存関係をキャッシュするステップ
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      # プロジェクトの依存関係をインストールするステップ
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # ユニットテストを実行するステップ
      - name: Run unit tests
        run: poetry run python -m unittest discover tests
        # pytestを使用する場合は以下のように変更
        # run: poetry run pytest tests/
