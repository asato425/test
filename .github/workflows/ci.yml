name: Python CI

on:
  workflow_dispatch:
    # 手動でワークフローを実行するためのイベント。
    # pushやpull_requestイベントを追加する場合は、以下のように記述します。
    # push:
    #   branches:
    #     - main
    # pull_request:
    #   branches:
    #     - main

jobs:
  build:
    name: Build and Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10 # ビルドジョブのタイムアウトを10分に設定
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      - name: Set up Python
        id: setup-python # Pythonバージョンをキャッシュキーで使用するためにIDを設定
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # pyproject.tomlのrequires-pythonに合わせて3.13を指定

      - name: Install Poetry
        run: |
          pip install poetry==1.8.2 # Poetryをインストール（バージョン固定）
          poetry config virtualenvs.in-project true # 仮想環境をプロジェクト内に作成するよう設定

      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: .venv # プロジェクト内の仮想環境ディレクトリをキャッシュ
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュをキーに設定
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi # Poetryを使って依存関係をインストール

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10 # テストジョブのタイムアウトを10分に設定
    needs: build # buildジョブが成功した後に実行
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない

      - name: Set up Python
        id: setup-python # Pythonバージョンをキャッシュキーで使用するためにIDを設定
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13" # pyproject.tomlのrequires-pythonに合わせて3.13を指定

      - name: Install Poetry
        run: |
          pip install poetry==1.8.2 # Poetryをインストール（バージョン固定）
          poetry config virtualenvs.in-project true # 仮想環境をプロジェクト内に作成するよう設定

      - name: Restore Poetry dependencies cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: .venv # プロジェクト内の仮想環境ディレクトリをキャッシュ
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # buildジョブと同じキーでキャッシュを復元
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-

      - name: Run tests
        run: poetry run python -m unittest discover tests # Poetryの仮想環境内でunittestを実行
