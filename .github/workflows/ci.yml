name: Python CI

# ワークフローがトリガーされるイベントを定義します。
# pushイベントで、'work_1005_1902' ブランチへの変更があった場合に実行されます。
# 他のイベント（例: pull_request, workflow_dispatch）を追加する場合は、以下のように記述します。
# on:
#   push:
#     branches:
#       - main
#       - 'feature/**'
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch: # 手動実行を許可
on:
  push:
    branches:
      - work_1005_1902

# ワークフローで実行されるジョブを定義します。
jobs:
  # ビルドとLintチェックを行うジョブ
  build:
    name: Build and Lint
    # ジョブが実行されるランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブの実行に必要な権限を最小限に設定します。
    permissions:
      contents: read
    # ジョブの最大実行時間を設定します。
    timeout-minutes: 10

    steps:
      # リポジリをチェックアウトします。
      # persist-credentials: false はセキュリティのベストプラクティスです。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # pyproject.tomlのrequires-python設定に基づき、Python 3.13を使用します。
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      # Poetryをインストールします。
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係キャッシュを設定します。
      # Pythonバージョンとpoetry.lockファイルのハッシュをキーとして使用し、依存関係の変更時にのみ再インストールをトリガーします。
      - name: Cache Poetry dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            python-3.13-poetry-

      # プロジェクトの依存関係をインストールします。
      # --no-interaction と --no-ansi はCI環境での非対話的な実行に適しています。
      - name: Install project dependencies
        run: poetry install --no-interaction --no-ansi

      # Lintツール（Flake8, Black, Mypy）をインストールします。
      # プロジェクトのpyproject.tomlに開発依存として定義されていない場合でも、
      # poetryの仮想環境内で一時的にインストールして使用します。
      - name: Install Lint tools
        run: poetry run pip install flake8 black mypy

      # Flake8を使ってコードのスタイルチェックを実行します。
      # continue-on-error: true を指定することで、Lintエラーが発生してもワークフローは続行されます。
      - name: Run Lint (Flake8)
        run: poetry run flake8 .
        continue-on-error: true

      # Blackを使ってコードのフォーマットチェックを実行します。
      # --check オプションで変更を加えずにフォーマット違反を検出します。
      # continue-on-error: true を指定することで、フォーマット違反があってもワークフローは続行されます。
      - name: Run Lint (Black)
        run: poetry run black --check .
        continue-on-error: true

      # Mypyを使って型チェックを実行します。
      # continue-on-error: true を指定することで、型エラーが発生してもワークフローは続行されます。
      - name: Run Type Check (Mypy)
        run: poetry run mypy .
        continue-on-error: true

  # テストを実行するジョブ
  test:
    name: Run Tests
    # ジョブが実行されるランナーのOSを指定します。
    runs-on: ubuntu-latest
    # ジョブの実行に必要な権限を最小限に設定します。
    permissions:
      contents: read
    # ジョブの最大実行時間を設定します。
    timeout-minutes: 10

    steps:
      # リポジトリをチェックアウトします。
      # persist-credentials: false はセキュリティのベストプラクティスです。
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false

      # Python環境をセットアップします。
      # pyproject.tomlのrequires-python設定に基づき、Python 3.13を使用します。
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      # Poetryをインストールします。
      - name: Install Poetry
        run: pip install poetry

      # Poetryの依存関係キャッシュを復元します。
      # ビルドジョブと同じキャッシュキーを使用します。
      - name: Restore Poetry dependencies cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry
          key: python-3.13-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            python-3.13-poetry-

      # プロジェクトの依存関係をインストールします。
      - name: Install project dependencies
        run: poetry install --no-interaction --no-ansi

      # unittestを使って単体テストを実行します。
      # 'tests' ディレクトリ内のテストファイルを自動的に検出して実行します。
      - name: Run unit tests
        run: poetry run python -m unittest discover tests
