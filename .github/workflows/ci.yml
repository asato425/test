name: CI
on:
  workflow_dispatch:
    # その他のイベント（例: push, pull_request）を追加する場合は、以下のコメントアウトを解除してください。
    # push:
    #   branches:
    #     - main # デフォルトブランチ名に合わせて変更してください
    # pull_request:
    #   branches:
    #     - main # デフォルトブランチ名に合わせて変更してください

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10 # ジョブのタイムアウトを10分に設定
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # 複数のPythonバージョンでテスト

    steps:
      - name: Checkout repository # リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない（セキュリティのため）

      - name: Set up Python ${{ matrix.python-version }} # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry # Poetryをインストール
        run: |
          pip install poetry
          poetry config virtualenvs.create false # CI環境では仮想環境を作成しない設定

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュ
        id: cache-poetry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry/virtualenvs # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュをキーに含める
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      - name: Install dependencies # 依存関係をインストール
        run: poetry install --no-interaction --no-ansi # poetry.lockに基づいて依存関係をインストール

      - name: Lint with Flake8 # Flake8でコードのスタイルをチェック
        run: |
          pip install flake8 # flake8をインストール
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics # エラーのみ表示
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics # 警告も表示するが、CIを失敗させない

      - name: Check code formatting with Black # Blackでコードのフォーマットをチェック
        run: |
          pip install black # blackをインストール
          black --check . # フォーマット違反がないかチェック（修正はしない）

      - name: Build package # パッケージをビルド
        run: poetry build # wheelとsdistを生成

      - name: Upload build artifacts # ビルドされたパッケージをアーティファクトとしてアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist-${{ matrix.python-version }} # アーティファクト名
          path: dist/ # ビルド成果物のパス

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10 # ジョブのタイムアウトを10分に設定
    permissions:
      contents: read # リポジトリのコンテンツを読み取る権限のみを付与

    needs: build # buildジョブが成功した後に実行
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # 複数のPythonバージョンでテスト

    steps:
      - name: Checkout repository # リポジトリをチェックアウト
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false # 認証情報を永続化しない（セキュリティのため）

      - name: Set up Python ${{ matrix.python-version }} # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry # Poetryをインストール
        run: |
          pip install poetry
          poetry config virtualenvs.create false # CI環境では仮想環境を作成しない設定

      - name: Cache Poetry dependencies # Poetryの依存関係をキャッシュ
        id: cache-poetry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pypoetry/virtualenvs # Poetryのキャッシュパス
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }} # OS, Pythonバージョン, poetry.lockのハッシュをキーに含める
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-

      - name: Install dependencies # 依存関係をインストール
        run: poetry install --no-interaction --no-ansi # poetry.lockに基づいて依存関係をインストール

      - name: Run tests with Pytest # Pytestでテストを実行
        run: |
          pip install pytest pytest-cov # pytestとカバレッジツールをインストール
          poetry run pytest --cov=test --cov-report=xml --cov-report=term-missing # テストを実行し、カバレッジレポートを生成

      - name: Upload coverage report # カバレッジレポートをアーティファクトとしてアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-report-${{ matrix.python-version }} # アーティファクト名
          path: coverage.xml # カバレッジレポートのパス
